// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ImageProcessorServiceClient is the client API for ImageProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessorServiceClient interface {
	Process(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Status, error)
}

type imageProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessorServiceClient(cc grpc.ClientConnInterface) ImageProcessorServiceClient {
	return &imageProcessorServiceClient{cc}
}

func (c *imageProcessorServiceClient) Process(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ImageProcessorService/Process", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessorServiceServer is the server API for ImageProcessorService service.
// All implementations must embed UnimplementedImageProcessorServiceServer
// for forward compatibility
type ImageProcessorServiceServer interface {
	Process(context.Context, *Image) (*Status, error)
	mustEmbedUnimplementedImageProcessorServiceServer()
}

// UnimplementedImageProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageProcessorServiceServer struct {
}

func (UnimplementedImageProcessorServiceServer) Process(context.Context, *Image) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedImageProcessorServiceServer) mustEmbedUnimplementedImageProcessorServiceServer() {}

// UnsafeImageProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessorServiceServer will
// result in compilation errors.
type UnsafeImageProcessorServiceServer interface {
	mustEmbedUnimplementedImageProcessorServiceServer()
}

func RegisterImageProcessorServiceServer(s grpc.ServiceRegistrar, srv ImageProcessorServiceServer) {
	s.RegisterService(&_ImageProcessorService_serviceDesc, srv)
}

func _ImageProcessorService_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessorServiceServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImageProcessorService/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessorServiceServer).Process(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

var _ImageProcessorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ImageProcessorService",
	HandlerType: (*ImageProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Process",
			Handler:    _ImageProcessorService_Process_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/image-processor.proto",
}
